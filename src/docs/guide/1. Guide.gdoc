h2. Introduction
A common requirement in many applications is to deal with countries and/or continents. The plugin's goal is to apply the DRY principle to these requirements.

In short, the plugin offers:

* populated domain classes for countries and continents
* i18n for continent and country names (for now, only en and de locales)
* tags for simple usage of 
** localized names
** select boxes: for all countries, for all continents, for all countries of a continent or for a defined set of countries. The select box contents are automatically sorted by the the localized country/continent name.

In future this plugin will be extended, some ideas are

* provide a IP address -> country conversion
* add more languages
* provide templates for scaffolding

The plugin is licensend under the [WTFPL|http://sam.zoy.org/wtfpl/].

h2. Installation

Installation is done like every other plugin:
{code}
grails install-plugin countries
{code}

When starting up the application, the Country and Continent domain classes are populated during the bootstrapping process.

h2. Domain classes
The plugin contains two domain classes @grails.plugin.countries.Country@ and @grails.plugin.countries.Continent@. The are related to each other with a bidirectional 1:n relation, so each continent has multiple countries and each country refers to one continent. The Country domain class holds the 2- and 3 letter codes of ISO 3166 as well as the name of country's capital. N.B. the country name itself is not stored in the domain class but is available in i18n properties files by following the convention @country.<3 letter code>@. So when e.g. lookup up localized names for Germany, you have to use property @country.GER@. The same applies for continents. Since there seems no standard abbreviation for continents the plugin uses:
* afa: Afrika
* asa: Asia
* aus: Australia
* eur: Europe
* nam: North America
* sam: South America

The domainclasses are populated during Grails' bootstrap process, so we have 190 countries for now.
{warning:title=Warning}
The author cannot assure that the country data is 100% accurate. If a country is missing in the list, or any errors are found, please file a JIRA.
{warning} 

h2. TagLib
The plugin comes with a taglib providing easy access to localized filenames and for country/continent related select boxes. For details, see the tag description in the left hand frame.

h2. Example
This short example demonstrates the usage and the capabilities of the plugin. It is assumed that you have created some grails project. A domain class @Address@ uses @Country@ :
{code:xml}class Address {
	String street
	String no
	String zip
	String city
	String state
	Country country
}
{code}

Assume a gsp used for creating address labels, the controller exposes a @Address@ instance using @address@:

{code}
Placeholder for name
${address.street} ${address.no}
${address.zip} ${address.city} ${address.state}

<country:name object="${address.country}"/>
{code}

During data entry, a select box should be used. The box should display each available country: 

{code}
...
<country:select name="country.id" value="${fieldValue(bean:address,field:'country.id')}" noSelection="['':'select please:']"/>
...
{code}
